import os
import time
import pathlib

from dotenv import load_dotenv
from datetime import datetime

# Import WebClient from Python SDK (github.com/slackapi/python-slack-sdk)
from slack_sdk import WebClient
from slack_sdk.errors import SlackApiError

from slack2bm import pv
from slack2bm import log

def onChanges(pvname=None, value=None, char_value=None, **kw):
    log.info('PV Changed! %s %s %s', pvname, char_value, time.ctime())
    bot_token = os.environ.get("BOT_TOKEN")
    app_token = os.environ.get("APP_TOKEN") 

    # WebClient insantiates a client that can call API methods
    # When using Bolt, you can use either `app.client` or the `client` passed to listeners.
    client = WebClient(token=bot_token)
    # ID of channel you want to post message to
    channel_id = "automated"
    message = 'Energy: ' + char_value + ' keV'
    try:
        # Call the conversations.list method using the WebClient
        result = client.chat_postMessage(
            channel=channel_id,
            text=message
            # You could also use a blocks[] array to send richer content
        )
        # Print result, which includes information about the message (like TS)
        log.info(result)

    except SlackApiError as e:
        log.error(f"Error: {e}")

def main():

    # set logs directory
    home = os.path.expanduser("~")
    logs_home = home + '/logs/'
    # make sure logs directory exists
    if not os.path.exists(logs_home):
        os.makedirs(logs_home)
    # setup logger
    lfname = logs_home + 'slack_' + datetime.strftime(datetime.now(), "%Y-%m-%d_%H:%M:%S") + '.log'
    log.setup_custom_logger(lfname)

    # Set bot tokens as environment values
    env_path = os.path.join(str(pathlib.Path.home()), '.slackenv')
    load_dotenv(dotenv_path=env_path)

    bot_token = os.environ.get("BOT_TOKEN")
    app_token = os.environ.get("APP_TOKEN") 

    # WebClient insantiates a client that can call API methods
    # When using Bolt, you can use either `app.client` or the `client` passed to listeners.
    client = WebClient(token=bot_token)

    pvs = pv.epics_energy('2bm:', '2bma:TomoScan:', '2bmbPG1:', '2bmbPG1:HDF1:')
    pvs['energy'].add_callback(onChanges)

    while True:
        time.sleep(1.e-3)


if __name__ == "__main__": 
    main()
